function tableHasValue (table, val)
    for index, value in ipairs(table) do
        if value == val then
            return true
        end
    end

    return false
end

function getOrSetSettingNumber(setting, message)
    local settingValue = settings.get(setting)

    if turbineMaxEnergy == nil then
        print(message)
        settingValue = read():gsub('%W','')
        settingValue = tonumber(settingValue)
        settings.set(setting, settingValue)
        settings.save(".settings")
    end

    return settingValue
end

function getOrSetSettingString(setting, message)
    local settingValue = settings.get(setting)

    if turbineMaxEnergy == nil then
        print(message)
        settingValue = read()
        settings.set(setting, settingValue)
        settings.save(".settings")
    end

    return settingValue
end

function formatNumber(number)
    local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')

    -- reverse the int-string and append a comma to all blocks of 3 digits
    int = int:reverse():gsub("(%d%d%d)", "%1,")

    -- reverse the int-string back remove an optional comma and put the 
    -- optional minus and fractional part back
    return minus .. int:reverse():gsub("^,", "") .. fraction
end

function numberToString(amount, decimal, neg_prefix)
    local str_amount,  formatted, famount, remain
  
    decimal = decimal or 2  -- default 2 decimal places
    neg_prefix = neg_prefix or "-" -- default negative sign
  
    famount = math.abs(round(amount,decimal))
    famount = math.floor(famount)
  
    remain = round(math.abs(amount) - famount, decimal)
  
          -- comma to separate the thousands
    formatted = comma_value(famount)
  
          -- attach the decimal portion
    if (decimal > 0) then
      remain = string.sub(tostring(remain),3)
      formatted = formatted .. "." .. remain ..
                  string.rep("0", decimal - string.len(remain))
    end
  
          -- if value is negative then format accordingly
    if (amount<0) then
      if (neg_prefix=="()") then
        formatted = "("..formatted ..")"
      else
        formatted = neg_prefix .. formatted 
      end
    end
  
    return formatted
  end