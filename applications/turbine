os.loadAPI("apis/helpers")
os.loadAPI("apis/gui")

print("Welcome to TurbineOS")

print("Looking for available turbines...")

local turbine = peripheral.find("mekanismgenerators:turbine_valve")
local modem = peripheral.find("modem")

if turbine == nil then
    error("No attached turbine found.")
end

if modem == nil then
    error("No attached modem found.")
end

-- Currently unable to automatically detect the maximum energy a turbine can still.
local turbineMaxEnergy = helpers.getOrSetSettingNumber("turbine.max_energy", "Turbine max energy (in FE's):")
-- What percentage of energy should the turbine reach before sending the command to shut down the reactor.
local turbineControlMaxEnergy = helpers.getOrSetSettingNumber("turbine.control_max_energy_percent", "Maximum Energy percent:")
-- What percentage of energy should the turbine reach before sending the command to start up the reactor.
local turbineControlMinEnergy = helpers.getOrSetSettingNumber("turbine.control_min_energy_percent", "Minimum Energy percent:")
-- What percentage of energy should the turbine reach before sending the command dump excess energy in the network.
-- Ideally this value should never be reached assuming good coolant flow into the reactor, however if theres some issue with pumping enough coolant into the reactor
-- then this threshold should enable the emergency cooling system & dump excess energy so that the turbine can continue to process steam.
local turbineControlCriticalMaxEnergy = helpers.getOrSetSettingNumber("turbine.control_critical_max_energy_percent", "Critical Energy Storage Percent Shutdown:")
local networkName = helpers.getOrSetSettingString("network.name", "Network name:")

modem.open(65535)
rednet.broadcast(networkName .. ":statistics:turbine_max_energy:" .. turbineMaxEnergy)

local reactorState = 0
local iteration = 0

while true do
    local currentEnergy = turbine.getEnergy()

    if reactorState == 0 and (currentEnergy / turbineMaxEnergy * 100) < turbineControlMinEnergy then
        reactorState = 1
        rednet.broadcast(networkName .. ":reactor:start")
    end

    if reactorState == 1 and (currentEnergy / turbineMaxEnergy * 100) > turbineControlMaxEnergy then
        reactorState = 0
        rednet.broadcast(networkName .. ":reactor:stop")
    end

    if reactorState == 0 and (currentEnergy / turbineMaxEnergy * 100) > turbineControlCriticalMaxEnergy then
        -- Manual intervention required to restart reactor.
        reactorState = -1
        rednet.broadcast(networkName .. ":power:dump")
        rednet.broadcast(networkName .. ":reactor:stop")
    end

    if iteration == 2000 then
        iteration = 0
        print("Current Power Stored: " .. helpers.formatNumber(turbine.getEnergy()) .. "RF")
        rednet.broadcast(networkName .. ":statistics:turbine_energy:" .. turbine.getEnergy())
    end

    iteration = iteration + 1
end